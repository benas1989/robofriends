{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/CardsList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","containers/ErrorBoundary.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Boolean","window","location","hostname","match","Card","id","name","username","email","className","key","alt","src","CardsList","cards","items","map","item","length","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflow","height","children","App","this","onRequestRobots","onSearchChange","filtered","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","ErrorBoundary","hasError","errorMessage","setState","message","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.4e0f8893.chunk.js","sourcesContent":["import \n{\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} \nfrom './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) =>\n{\n    switch(action.type)\n    {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) =>\n{\n    switch(action.type)\n    {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id, name,username, email}) =>\n{\n    let card = (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' key={id}>\n            <img className='br-100 ba h5 w5 dib' alt='Robot' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{username}</p>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n    return card;\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './CardsList.css'\n\nconst CardsList = ({items}) =>\n{\n    let cards = items.map(item => Card({id:item.id, name:item.name,username:item.username, email:item.email}))\n    if(cards.length === 0)\n        return <h1>No results!</h1>\n    return (<div className='cardsList'> {cards} </div>);\n}\n\nexport default CardsList;","import React from 'react';\n\n\nconst SearchBox = ({searchChange}) =>\n{\n    return (\n        <div className='pa2'>\n            <input onChange={searchChange} type='search' placeholder='search robot' className='pa3 ba b--green bg-lightest-blue'/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>\n{\n    return (\n        <div style={{overflow: 'scroll', 'border':'1px solid black', height:'80vh'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport 'tachyons';\nimport CardsList from '../components/CardsList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css'\n\nimport { connect} from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions.js';\n\nconst mapStateToProps = state =>\n{\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component\n{\n    componentDidMount()\n    {\n        this.props.onRequestRobots();\n    }\n\n    render()\n    {\n        const {searchField, onSearchChange, robots, isPending, error} = this.props;\n        let filtered = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n        return (\n            <div className='tc'>\n                <h1>RoboFriends</h1>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    {\n                        isPending ? <h1>Loading...</h1> : <CardsList items={filtered}/>\n                    }\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import \n{\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} \nfrom './constants.js';\n\nexport const setSearchField = (text) => (\n    {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n)\n\nexport const requestRobots = () => (dispatch) => \n{\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then( data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}) )\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\n\n\nclass ErrorBoundary extends Component {\n    constructor (props)\n    {\n        super(props);\n        this.state = {\n            hasError: false,\n            errorMessage: ''\n        }\n    }\n\n    componentDidCatch(props)\n    {\n        this.setState({hasError: true, errorMessage: props.message})\n    }\n\n    render(props)\n    {\n        if(this.state.hasError)\n        {\n            return (\n            <div className='tc'>\n                <h1>Ops some error!</h1>\n                <p>{this.state.errorMessage}</p>\n            </div>)\n        }\n        return this.props.children; \n    }\n}\n\nexport default ErrorBoundary;","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware  from 'redux-thunk'\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport ErrorBoundary from './containers/ErrorBoundary'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Fragment>\n    <Provider store={store}>\n      <ErrorBoundary>\n          <App/>\n      </ErrorBoundary> \n    </Provider>\n  </Fragment>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}