{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardsList.js","components/SearchBox.js","components/Scroll.js","containers/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","username","email","className","key","alt","src","CardsList","cards","items","map","item","length","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflow","height","children","ErrorBoundary","state","hasError","errorMessage","this","setState","message","Component","App","onSearchChange","event","searchfield","target","value","robots","fetch","then","response","json","users","user","catch","error","Error","filtered","filter","robot","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"4PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCDSC,G,MAfF,SAAC,GACb,IADcC,EACf,EADeA,GAAIC,EACnB,EADmBA,KAAKC,EACxB,EADwBA,SAAUC,EAClC,EADkCA,MAY9B,OATI,yBAAKC,UAAU,sDAAsDC,IAAKL,GACtE,yBAAKI,UAAU,sBAAsBE,IAAI,QAAQC,IAAG,+BAA0BP,EAA1B,cACpD,6BACI,4BAAKC,GACL,2BAAIC,GACJ,2BAAIC,OCELK,G,MARG,SAAC,GAClB,IACOC,EADR,EADoBC,MAEEC,KAAI,SAAAC,GAAI,OAAIb,EAAK,CAACC,GAAGY,EAAKZ,GAAIC,KAAKW,EAAKX,KAAKC,SAASU,EAAKV,SAAUC,MAAMS,EAAKT,WAClG,OAAoB,IAAjBM,EAAMI,OACE,2CACH,yBAAKT,UAAU,aAAf,IAA6BK,EAA7B,OCGGK,EATG,SAAC,GAClB,IADmBC,EACpB,EADoBA,aAEhB,OACI,yBAAKX,UAAU,OACX,2BAAOY,SAAUD,EAAcE,KAAK,SAASC,YAAY,eAAed,UAAU,uCCI/Ee,EATA,SAACC,GAEZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAU,OAAS,kBAAmBC,OAAO,SAC/DH,EAAMI,WC0BJC,E,kDA5BX,WAAaL,GACZ,IAAD,8BACI,cAAMA,IACDM,MAAQ,CACTC,UAAU,EACVC,aAAc,IAJtB,E,8DAQkBR,GAEdS,KAAKC,SAAS,CAACH,UAAU,EAAMC,aAAcR,EAAMW,Y,6BAGhDX,GAEH,OAAGS,KAAKH,MAAMC,SAGV,yBAAKvB,UAAU,MACX,+CACA,2BAAIyB,KAAKH,MAAME,eAGhBC,KAAKT,MAAMI,a,GAzBEQ,aCiEbC,G,wDAzDX,aACC,IAAD,8BACI,gBA0BJC,eAAiB,SAACC,GAEd,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SA3BzC,EAAKZ,MAAQ,CACTa,OAAQ,GACRH,YAAa,GACbT,UAAU,EACVC,aAAc,IANtB,E,gEAWC,IAAD,OACIY,MAAM,8CAA8CC,MAAK,SAAAC,GAErDA,EAASC,OAAOF,MAAK,SAAAG,GAEb,EAAKd,SAAS,CAACS,OAAQK,EAAMjC,KAAI,SAAAkC,GAC7B,MAAO,CAAC7C,GAAI6C,EAAK7C,GAAIC,KAAM4C,EAAK5C,KAAMC,SAAU2C,EAAK3C,SAAUC,MAAO0C,EAAK1C,kBAI1F2C,OAAM,SAAAC,GAEC,EAAKjB,SAAS,CAACH,UAAU,EAAMC,aAAcmB,EAAMhB,e,+BAW3D,GAAGF,KAAKH,MAAMC,SAEV,MAAM,IAAIqB,MAAMnB,KAAKH,MAAME,cAHnC,MAKkCC,KAAKH,MAA5Ba,EALX,EAKWA,OAAQH,EALnB,EAKmBA,YACXa,EAAWV,EAAOW,QAAO,SAAAC,GAAK,OAAIA,EAAMlD,KAAKmD,cAAcC,SAASjB,EAAYgB,kBACpF,OACI,yBAAKhD,UAAU,MACX,+CACA,kBAAC,EAAD,CAAWW,aAAcc,KAAKK,iBAC9B,kBAAC,EAAD,KAEQ,kBAAC,EAAD,KACMK,EAAO1B,OAA+B,kBAAC,EAAD,CAAWH,MAAOuC,IAAxC,iD,GAlD5BjB,cCFlBsB,IAASC,OACT,kBAAC,WAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLgB,QAAQhB,MAAMA,EAAMhB,c","file":"static/js/main.d2656238.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id, name,username, email}) =>\n{\n    let card = (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' key={id}>\n            <img className='br-100 ba h5 w5 dib' alt='Robot' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{username}</p>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n    return card;\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './CardsList.css'\n\nconst CardsList = ({items}) =>\n{\n    let cards = items.map(item => Card({id:item.id, name:item.name,username:item.username, email:item.email}))\n    if(cards.length === 0)\n        return <h1>No results!</h1>\n    return (<div className='cardsList'> {cards} </div>);\n}\n\nexport default CardsList;","import React from 'react';\n\n\nconst SearchBox = ({searchChange}) =>\n{\n    return (\n        <div className='pa2'>\n            <input onChange={searchChange} type='search' placeholder='search robot' className='pa3 ba b--green bg-lightest-blue'/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>\n{\n    return (\n        <div style={{overflow: 'scroll', 'border':'1px solid black', height:'80vh'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\n\nclass ErrorBoundary extends Component {\n    constructor (props)\n    {\n        super(props);\n        this.state = {\n            hasError: false,\n            errorMessage: ''\n        }\n    }\n\n    componentDidCatch(props)\n    {\n        this.setState({hasError: true, errorMessage: props.message})\n    }\n\n    render(props)\n    {\n        if(this.state.hasError)\n        {\n            return (\n            <div className='tc'>\n                <h1>Ops some error!</h1>\n                <p>{this.state.errorMessage}</p>\n            </div>)\n        }\n        return this.props.children; \n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport 'tachyons';\nimport CardsList from '../components/CardsList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from './ErrorBoundary';\nimport './App.css'\n\n\nclass App extends Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: '',\n            hasError: false,\n            errorMessage: ''\n        }\n    }\n\n    componentDidMount()\n    {\n        fetch('https://jsonplaceholder.typicode.com/users').then(response =>\n        {\n            response.json().then(users => \n                {\n                    this.setState({robots: users.map(user => {\n                        return {id: user.id, name: user.name, username: user.username, email: user.email};\n                    })})\n                })\n        })\n        .catch(error => \n            { \n                this.setState({hasError: true, errorMessage: error.message});\n            })\n    }\n\n    onSearchChange = (event) =>\n    {\n        this.setState({searchfield: event.target.value});\n    }\n\n    render()\n    {\n        if(this.state.hasError)\n        {\n            throw new Error(this.state.errorMessage);  \n        }\n        const {robots, searchfield} = this.state;\n        let filtered = robots.filter(robot => robot.name.toLowerCase().includes(searchfield.toLowerCase()));\n        return (\n            <div className='tc'>\n                <h1>RoboFriends App</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    {\n                        <ErrorBoundary>\n                            {!robots.length ? <h1>Loading...</h1> : <CardsList items={filtered}/>}\n                        </ErrorBoundary>\n                    }\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport ErrorBoundary from './containers/ErrorBoundary'\n\nReactDOM.render(\n<Fragment>\n  <ErrorBoundary>\n    <App/>\n  </ErrorBoundary> \n</Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}